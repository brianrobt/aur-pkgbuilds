name: Update Git Packages

on:
  # schedule:
  #   # Run daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      package:
        description: 'Specific package to update (optional, leave empty for all git packages)'
        required: false
        type: string

env:
  AUR_USERNAME: ${{ secrets.AUR_USERNAME }}
  AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

jobs:
  update-git-packages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(format('["{0}"]', github.event.inputs.package || 'all')) }}

    steps:
      - name: Setup SSH for AUR
        if: env.AUR_USERNAME != ''
        run: |
          mkdir -p ~/.ssh
          echo "$AUR_SSH_PRIVATE_KEY" > ~/.ssh/aur_key
          chmod 600 ~/.ssh/aur_key
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
          cat >> ~/.ssh/config << EOF
          Host aur.archlinux.org
            IdentityFile ~/.ssh/aur_key
            User $AUR_USERNAME
          EOF

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Find git packages
        id: find-packages
        run: |
          if [ "${{ matrix.package }}" = "all" ]; then
            # Find all directories ending with -git
            PACKAGES=$(find . -maxdepth 1 -type d -name "*-git" -exec basename {} \; | sort)
          else
            # Use specific package if provided
            PACKAGES="${{ matrix.package }}"
          fi
          echo "packages=$(echo "$PACKAGES" | tr '\n' ' ')" >> $GITHUB_OUTPUT
          echo "Found packages: $PACKAGES"

      - name: Update git packages
        run: |
          PACKAGES="${{ steps.find-packages.outputs.packages }}"

          for PKG in $PACKAGES; do
            echo "Processing package: $PKG"

            if [ ! -d "$PKG" ]; then
              echo "Package directory $PKG not found, skipping..."
              continue
            fi

            echo "Building and updating $PKG..."

            scripts/run_docker.sh $PKG

            cd $PKG-aur

            # Check if PKGBUILD or .SRCINFO have changes
            if git diff --quiet PKGBUILD .SRCINFO 2>/dev/null; then
              echo "changes=false" >> $GITHUB_OUTPUT
              echo "No changes detected in PKGBUILD or .SRCINFO"
            else
              echo "changes=true" >> $GITHUB_OUTPUT
              echo "Changes detected in PKGBUILD or .SRCINFO:"
              git diff --name-only PKGBUILD .SRCINFO 2>/dev/null || true
              git config --local user.email "brianrobt@pm.me"
              git config --local user.name "Brian Thompson"

              # Add only PKGBUILD and .SRCINFO files
              git add PKGBUILD .SRCINFO

              # Get pkgver value
              PKGVER=$(grep "^pkgver=" PKGBUILD | sed 's/pkgver=//' | cut -d' ' -f1)

              # Get pkgrel value
              PKGREL=$(grep "^pkgrel=" PKGBUILD | sed 's/pkgrel=//')

              PKGVERREL="$PKGVER-$PKGREL"

              echo "Running git commit with message: 'build: release v$PKGVERREL'"
              git commit -m "build: release $PKG v$PKGVERREL"
              git push origin master

              cp PKGBUILD ../$PKG/PKGBUILD
              cp .SRCINFO ../$PKG/.SRCINFO

              cd ..
              git add -A
              git commit -m "build: release $PKG v$PKGVERREL"
              git push origin master
            fi

            echo "Updated $PKG (AUR package: $AUR_PKG_NAME)"
          done

      - name: Create summary
        if: always()
        run: |
          echo "## Git Package Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.find-packages.outputs.changes }}" = "true" ]; then
            echo "**Updates Applied**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following packages were updated:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only | grep -E '^[^/]+/(PKGBUILD|\.SRCINFO)$' | cut -d'/' -f1 | sort -u | while read PKG; do
              echo "- $PKG" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "${{ env.AUR_USERNAME }}" != "" ]; then
              echo "**AUR Updates**" >> $GITHUB_STEP_SUMMARY
              echo "Changes were also pushed to the AUR repositories." >> $GITHUB_STEP_SUMMARY
            else
              echo "**AUR Updates Skipped**" >> $GITHUB_STEP_SUMMARY
              echo "AUR credentials not configured. Changes were only committed to this repository." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**No Updates Needed**" >> $GITHUB_STEP_SUMMARY
            echo "All git packages are up to date." >> $GITHUB_STEP_SUMMARY
          fi