name: Update Git Packages

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      package:
        description: 'Specific package to update (optional, leave empty for all git packages)'
        required: false
        type: string

env:
  AUR_USERNAME: ${{ secrets.AUR_USERNAME }}
  AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  find-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get git packages
        id: get-packages
        run: |
          if [ "${{ github.event.inputs.package }}" != "" ]; then
            # Use specific package if provided
            PACKAGES='["${{ github.event.inputs.package }}"]'
          else
            # Find all directories that end with -git
            PACKAGES=$(find . -maxdepth 1 -type d -name "*-git" | while read dir; do
              if [ -f "$dir/PKGBUILD" ]; then
                if grep -q "^url=.*github\.com" "$dir/PKGBUILD" 2>/dev/null; then
                  basename "$dir"
                fi
              fi
            done | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          echo "Found packages: $PACKAGES"

  update-git-packages:
    needs: find-packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.find-packages.outputs.packages) }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Cache Docker layers
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Setup SSH for AUR
        if: env.AUR_USERNAME != ''
        run: |
          mkdir -p ~/.ssh
          echo "$AUR_SSH_PRIVATE_KEY" > ~/.ssh/aur_key
          chmod 600 ~/.ssh/aur_key
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
          cat >> ~/.ssh/config << EOF
          Host aur.archlinux.org
            IdentityFile ~/.ssh/aur_key
            User $AUR_USERNAME
          EOF

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update git package
        id: update-git-package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PKG="${{ matrix.package }}"

          if [ ! -d "$PKG" ]; then
            echo "Package directory $PKG not found, skipping..."
            exit 0
          fi

          echo "Building and updating $PKG..."

          # Clone the AUR repository first
          git clone ssh://aur@aur.archlinux.org/$PKG.git $PKG-aur
          cd $PKG-aur

          # Save the current pkgver before any updates
          ORIGINAL_PKGVER=$(grep "^pkgver=" PKGBUILD | sed 's/pkgver=//' | cut -d' ' -f1)
          echo "Original pkgver: $ORIGINAL_PKGVER"

          # Install makepkg in Arch Linux container and run makepkg --nobuild
          docker run --rm -v $(pwd):/workspace -w /workspace brianrobt/archlinux-aur-dev:latest bash -c "
            pacman -Sy --noconfirm pacman-contrib
            cd /workspace
            chown -R root:root /workspace
            makepkg --nobuild
          "

          # Get the updated pkgver after makepkg --nobuild
          UPDATED_PKGVER=$(grep "^pkgver=" PKGBUILD | sed 's/pkgver=//' | cut -d' ' -f1)
          echo "Updated pkgver: $UPDATED_PKGVER"

          # Compare versions
          if [ "$ORIGINAL_PKGVER" != "$UPDATED_PKGVER" ]; then
            echo "Version changed from $ORIGINAL_PKGVER to $UPDATED_PKGVER"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $ORIGINAL_PKGVER"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

          cd ..

          # Now run the original script
          scripts/run_docker.sh --user "Brian Thompson" --email "brianrobt@pm.me" $PKG

          cd $PKG-aur

          # Check if PKGBUILD or .SRCINFO have changes
          if git diff --quiet PKGBUILD .SRCINFO 2>/dev/null; then
            echo "No changes detected in PKGBUILD or .SRCINFO"
          else
            echo "Changes detected in PKGBUILD or .SRCINFO:"
            git diff --name-only PKGBUILD .SRCINFO 2>/dev/null || true

            # Add only PKGBUILD and .SRCINFO files
            git add PKGBUILD .SRCINFO

            # Get pkgver value
            PKGVER=$(grep "^pkgver=" PKGBUILD | sed 's/pkgver=//' | cut -d' ' -f1)

            # Get pkgrel value
            PKGREL=$(grep "^pkgrel=" PKGBUILD | sed 's/pkgrel=//')

            PKGVERREL="$PKGVER-$PKGREL"

            echo "Running git commit with message: 'build: release $PKG v$PKGVERREL'"
            git commit -m "build: release $PKG v$PKGVERREL"
            git push origin master

            cp PKGBUILD ../$PKG/PKGBUILD
            cp .SRCINFO ../$PKG/.SRCINFO

            cd ..

            git add -A
            git commit -m "build: release $PKG v$PKGVERREL"
            git push origin master

            echo "pushed=true" >> $GITHUB_OUTPUT
          fi

          echo "Updated $PKG"

      - name: Create summary
        if: always()
        run: |
          echo "## Git Package Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** ${{ matrix.package }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if version changed during makepkg --nobuild
          if [ "${{ steps.update-git-package.outputs.version_changed }}" == "true" ]; then
            echo "**Version Check:** 🔄 Version updated by makepkg --nobuild" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Version Check:** ⏭️ No version change detected" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if changes were actually pushed
          if [ "${{ steps.update-git-package.outputs.pushed }}" == "true" ]; then
            echo "**Status:** ✅ Updated" >> $GITHUB_STEP_SUMMARY
            echo "Changes were detected and pushed to both this repository and AUR." >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ⏭️ No changes" >> $GITHUB_STEP_SUMMARY
            echo "No changes detected in PKGBUILD or .SRCINFO files." >> $GITHUB_STEP_SUMMARY
          fi