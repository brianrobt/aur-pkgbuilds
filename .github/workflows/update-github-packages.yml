name: Update GitHub Packages

on:
  # schedule:
  #   # Run daily at 3 AM UTC (1 hour after git packages)
  #   - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      package:
        description: "Specific package to update (optional, leave empty for all GitHub packages)"
        required: false
        type: string

env:
  AUR_USERNAME: ${{ secrets.AUR_USERNAME }}
  AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

jobs:
  find-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Get GitHub packages
        id: get-packages
        run: |
          if [ "${{ github.event.inputs.package }}" != "" ]; then
            # Use specific package if provided
            PACKAGES='["${{ github.event.inputs.package }}"]'
          else
            # Find all directories that don't end with -git and have github.com in their PKGBUILD url
            PACKAGES=$(find . -maxdepth 1 -type d -name "*" ! -name ".*" ! -name "*-git" ! -name "*-aur" ! -name "scripts" ! -name "aurvt" | while read dir; do
              if [ -f "$dir/PKGBUILD" ]; then
                if grep -q "^url=.*github\.com" "$dir/PKGBUILD" 2>/dev/null; then
                  basename "$dir"
                fi
              fi
            done | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          echo "Found packages: $PACKAGES"

  update-github-packages:
    needs: find-packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        package: ${{ fromJson(needs.find-packages.outputs.packages) }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Cache Docker layers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Setup SSH for AUR
        if: env.AUR_USERNAME != ''
        run: |
          mkdir -p ~/.ssh
          echo "$AUR_SSH_PRIVATE_KEY" > ~/.ssh/aur_key
          echo "$AUR_SSH_PUBLIC_KEY" > ~/.ssh/aur_key.pub
          chmod 600 ~/.ssh/aur_key
          chmod 600 ~/.ssh/aur_key.pub
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
          cat >> ~/.ssh/config << EOF
          Host aur.archlinux.org
            IdentityFile ~/.ssh/aur_key
            User $AUR_USERNAME
          EOF

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6

      - name: Install aurvt
        run: |
          # Install aurvt using go install
          go install github.com/brianrobt/aurvt@latest

          # Verify installation
          which aurvt || echo "aurvt not found in PATH"
          ls -la $(go env GOPATH)/bin/aurvt || echo "aurvt not found in GOPATH/bin"

          # Add GOPATH/bin to PATH if not already there
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Check for new version
        id: check-version
        run: |
          PKG="${{ matrix.package }}"

          if [ ! -d "$PKG" ]; then
            echo "Package directory $PKG not found, skipping..."
            exit 0
          fi

          echo "Checking for new version of $PKG..."

          # Run aurvt to check for new version
          AURVT_OUTPUT=$(aurvt "$PKG" 2>&1)
          AURVT_EXIT_CODE=$?

          echo "aurvt output: $AURVT_OUTPUT"

          if [ $AURVT_EXIT_CODE -eq 0 ]; then
            # Check if aurvt found a new version
            if echo "$AURVT_OUTPUT" | grep -q "🔄 New version available"; then
              echo "New version available for $PKG"
              echo "has_update=true" >> $GITHUB_OUTPUT

              # Extract the new version
              NEW_VERSION=$(echo "$AURVT_OUTPUT" | grep "Latest version:" | sed 's/Latest version: //')
              echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            else
              echo "No new version available for $PKG"
              echo "has_update=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "aurvt failed for $PKG"
            echo "has_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Update and build package
        if: steps.check-version.outputs.has_update == 'true'
        id: update-package
        run: |
          export GITHUB_TOKEN=${{ secrets.GH_TOKEN }}

          PKG="${{ matrix.package }}"
          NEW_VERSION="${{ steps.check-version.outputs.new_version }}"

          echo "Building and updating $PKG to version $NEW_VERSION..."

          # Run the docker build script
          scripts/run_docker.sh --user "Brian Thompson" --email "brianrobt@pm.me" $PKG

          cd $PKG-aur

          # Check if PKGBUILD or .SRCINFO have changes
          if git diff --quiet PKGBUILD .SRCINFO 2>/dev/null; then
            echo "No changes detected in PKGBUILD or .SRCINFO"
          else
            echo "Changes detected in PKGBUILD or .SRCINFO:"
            git diff --name-only PKGBUILD .SRCINFO 2>/dev/null || true

            # Add only PKGBUILD and .SRCINFO files
            git add PKGBUILD .SRCINFO

            # Get pkgver value
            PKGVER=$(grep "^pkgver=" PKGBUILD | sed 's/pkgver=//' | cut -d' ' -f1)

            # Get pkgrel value
            PKGREL=$(grep "^pkgrel=" PKGBUILD | sed 's/pkgrel=//')

            PKGVERREL="$PKGVER-$PKGREL"

            echo "Running git commit with message: 'build: release $PKG v$PKGVERREL'"
            git commit -m "build: release $PKG v$PKGVERREL"
            git push origin master

            cp PKGBUILD ../$PKG/PKGBUILD
            cp .SRCINFO ../$PKG/.SRCINFO

            cd ..
            git add -A
            git commit -m "build($PKG): release v$PKGVERREL"
            git push origin master

            echo "pushed=true" >> $GITHUB_OUTPUT
          fi

          echo "Updated $PKG"

      - name: Create summary
        if: always()
        run: |
          echo "## GitHub Package Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** ${{ matrix.package }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if new version was found
          if [ "${{ steps.check-version.outputs.has_update }}" == "true" ]; then
            echo "**New Version:** ${{ steps.check-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY

            # Check if changes were actually pushed
            if [ "${{ steps.update-package.outputs.pushed }}" == "true" ]; then
              echo "**Status:** ✅ Updated" >> $GITHUB_STEP_SUMMARY
              echo "New version was detected and changes were pushed to both this repository and AUR." >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** ⚠️ Build failed" >> $GITHUB_STEP_SUMMARY
              echo "New version was detected but the build process failed." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** ⏭️ No update" >> $GITHUB_STEP_SUMMARY
            echo "No new version was detected for this package." >> $GITHUB_STEP_SUMMARY
          fi
